#!/usr/bin/env python
#
# simba create --package foo
# simba create --application fie
#
# simba install bar
#
# simba release foo
#

import sys
import os
import argparse
import subprocess

PACKAGE_SETUP_PY = """#!/usr/bin/env python

from setuptools import setup

setup(name="{name}",
      version="0.0.1",
      description=("Add a description"),
      author="{author}",
      author_email='simba@simba.com',
      packages=["{name}"],
      package_data={{"": ["inc/*.h", "src/*.c"]}},
      license='MIT',
      classifiers=[
          'License :: OSI Approved :: MIT License',
      ],
      url='https://github.com/eerimoq/simba')
"""


def create(args):
    """The create subcommand.
    """

    if not args.package and not args.application:
        sys.stderr.write("--package or --application must be present\n")
        sys.exit(1)

    # Create the package root directory
    os.makedirs(args.name)

    if args.package:
        # Create setup.py
        setup_path = os.path.join(args.name, "setup.py")
        with open(setup_path, "w") as f:
            f.write(PACKAGE_SETUP_PY.format(name=args.name,
                                            author="Simba"))

        # Create the subdirectories within the package
        subdirs = ["doc", "inc", "src", "tst"]

        for subdir in subdirs:
            os.makedirs(os.path.join(args.name, args.name, subdir))

        # Create __init__.py
        init_path = os.path.join(args.name, args.name, "__init__.py")
        with open(init_path, "w") as f:
            f.write("# This file was generated by simba")
    else:
        sys.exit(1)


def install(args):
    """The install subcommand.
    """

    simba_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    dist_packages = os.path.join(simba_root, "dist-packages")

    print "Installing package", args.package, "into", dist_packages

    # use pip to install the package into simbas' dist-packages
    command = ["pip", "install", "--target=" + dist_packages, args.package]
    print ' '.join(command)
    subprocess.check_call(command)


def release(args):
    """The release subcommand.
    """

    subprocess.check_call(["python", "setup.py", "sdist"])
    subprocess.check_call(["python", "setup.py", "bdist_wheel", "--universal"])
    #subprocess.check_call(["twine", "upload", "dist"])


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    # The create subparser
    create_parser = subparsers.add_parser("create")
    create_parser.add_argument("--package",
                               action="store_true",
                               help="Create a package.")
    create_parser.add_argument("--application",
                               action="store_true",
                               help="Create an application.")
    create_parser.add_argument("name",
                               help="Name of the package or application.")
    create_parser.set_defaults(func=create)

    # The install subparser
    install_parser = subparsers.add_parser("install")
    install_parser.add_argument("name",
                                help="Name of the package.")
    install_parser.set_defaults(func=create)

    # The release subparser
    install_parser = subparsers.add_parser("release")
    install_parser.set_defaults(func=release)

    args = parser.parse_args()
    args.func(args)
