#
# @file make/platformio.sconscript
# @version 0.5.0
#
# @section License
# Copyright (C) 2014-2016, Erik Moqvist
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# This file is part of the Simba project.
#

import os
from os.path import join
import subprocess
import shutil

from SCons.Script import DefaultEnvironment
from platformio.builder.tools.platformio import SRC_DEFAULT_FILTER

# Map the PlatformIO board name to the Simba board name
BOARD_MAP = {
    "due": "arduino_due",
    "megaatmega2560": "arduino_mega",
    "nanoatmega328": "arduino_nano",
    "uno": "arduino_uno"
}


def add_include_paths(env, paths):
    """Add given list of include paths.

    """
        
    for path in paths:
        env.VariantDirWrap(
            join("$BUILD_DIR", "SimbaFramework", path),
            join("$PLATFORMFW_DIR", path)
        )
        env.Append(CPPPATH=[join("$BUILD_DIR", "SimbaFramework", path)])


def add_common_include_paths(env):
    """Add the common include paths.

    """

    env.Append(CPPPATH=[join("$BUILD_DIR", "SimbaFramework")])
    env.Append(CPPPATH=[join("$BUILD_DIR", "SimbaFramework", "src")])

    paths = [
        "src",
        "gen",
        join("src", "boards", "$BOARD"),
        join("src", "mcus", "$BOARD_MCU"),
        join("src", "kernel"),
        join("src", "kernel", "ports", "$ARCH", "gnu"),
        join("src", "drivers"),
        join("src", "drivers", "ports", "$ARCH"),
        join("src", "slib"),
        join("src", "inet")
    ]

    add_include_paths(env, paths)


def add_common_defines(env):
    """Add common defines.

    """

    env.Append(
        CPPDEFINES=[
            "ARCH_$ARCH_UPPER",
            "MCU_$MCU_UPPER",
            "BOARD_$BOARD_UPPER",
            "VERSION=$VERSION"
        ]
    )


def set_default_values(env):
    """Set default values in the environment.

    """

    if "VERSION" not in env:
        with open(env.subst(join("$PLATFORMFW_DIR", "VERSION.txt"))) as f:
            env.Append(VERSION=f.read().strip())
        
    if "NAME" not in env:
        env.Append(NAME="app_name")


def setup_mcu_avr(env):
    """Setup the AVR MCU environment.

    """

    if env.subst(env["BOARD_MCU"]) == "atmega2560":
        env.Replace(MCU_DESC="Atmel ATMega25600 AVR @ 16MHz, 8k sram, 256k flash",
                    MAIN_STACK_END="0x802200")
    elif env.subst(env["BOARD_MCU"]) == "atmega328p":
        env.Replace(MCU_DESC="Atmel ATMega328p AVR @ 16MHz, 2k sram, 32k flash",
                    MAIN_STACK_END="0x800900")
    else:
        env.Replace(MCU_DESC="Not found")

    env.Replace(ARCH="avr",
                SETTING_MEMORY="eeprom",
                SETTING_OFFSET="128",
                SETTING_SIZE="256",
                ENDIANESS="little")

    env.Append(CPPDEFINES=["THRD_NMONITOR"])

    env.Append(CCFLAGS=[
        "-funsigned-char",
        "-funsigned-bitfields",
        "-std=gnu99",
        "-Wno-error=unused-variable",
        "-Werror",
        "-O2",
        "-fpack-struct"
    ])

    env.Append(LINKFLAGS=[
        "-Wl,--defsym=__main_stack_end=$MAIN_STACK_END",
        "-Wl,-Map=$BUILD_DIR/firmware.map", # This should be added to PlatformIO
    ])
    

def setup_mcu_sam(env):
    """Setup the SAM MCU environment.

    """

    if env.subst(env["BOARD_MCU"]).endswith("/3x8e"):
        env.Replace(MCU_DESC="Atmel SAM3X8E Cortex-M3 @ 84MHz, 96k sram, 512k flash")
    else:
        env.Replace(MCU_DESC="Not found")

    env.Replace(ARCH="arm",
                SETTING_MEMORY="flash",
                SETTING_OFFSET="0",
                SETTING_SIZE="4096",
                ENDIANESS="little")

    env.Append(CCFLAGS=[
        "-funsigned-char",
        "-funsigned-bitfields",
        "-std=gnu99",
        "-Wno-error=unused-variable",
        "-Werror",
        "-O2",
        "-fpack-struct"
    ])

    linkflags = []

    for flag in env["LINKFLAGS"]:
        if "-Wl,--entry" not in flag:
            linkflags.append(flag)

    env.Replace(LINKFLAGS=linkflags + [
        "-Wl,-T$PLATFORMFW_DIR/src/mcus/$BOARD_MCU/script.ld",
        "-Wl,-Map=$BUILD_DIR/firmware.map" # This should be added to PlatformIO
    ])

    env.Append(LIBPATH=["$PLATFORMFW_DIR/src/mcus/$BOARD_MCU"])


def setup_mcu_esp(env, linker_script, flash_size_map):
    """Setup the ESP environment.

    """

    env.Replace(ARCH="esp",
                SETTING_MEMORY="flash",
                SETTING_OFFSET="128",
                SETTING_SIZE="256",
                ENDIANESS="little")

    add_include_paths(env, [
        "src/mcus/esp8266",
        "3pp/ESP8266_RTOS_SDK/extra_include",
        "3pp/ESP8266_RTOS_SDK/include",
        "3pp/ESP8266_RTOS_SDK/include/espressif",
        "3pp/ESP8266_RTOS_SDK/include/espressif/esp8266",
        "3pp/ESP8266_RTOS_SDK/include/lwip",
        "3pp/ESP8266_RTOS_SDK/include/lwip/ipv4",
        "3pp/ESP8266_RTOS_SDK/include/lwip/ipv6"
    ])

    env.Append(CPPDEFINES=[
        "THRD_NMONITOR"
    ])

    linkflags = []

    for flag in env["LINKFLAGS"]:
        if ("-Wl,-T" not in flag
            and "-Wl,-wrap,register_chipv6_phy" not in flag):
            linkflags.append(flag)

    env.Replace(LINKFLAGS=linkflags + [
        "-Wl,--start-group",
        "-lminic",
        "-lgcc",
        "-lhal",
        "-lphy",
        "-lpp",
        "-lnet80211",
        "-lwpa",
        "-lcrypto",
        "-lmain",
        "-lfreertos",
        "-llwip",
        "-Wl,--end-group",
        "-Wl,-T" + linker_script
    ])

    env.Append(LIBPATH=[
        "$PLATFORMFW_DIR/src/mcus/$BOARD_MCU/ld",
        "$PLATFORMFW_DIR/3pp/ESP8266_RTOS_SDK/lib"
    ])

    builders = {}

    for key, value in env["BUILDERS"].items():
        if key not in ["ElfToBin"]:
            builders[key] = value

    def build_function(target, source, env):
	subprocess.check_call(
            "xtensa-lx106-elf-objcopy --only-section .text -O binary "
            + str(source[0]) + " eagle.app.v6.text.bin",
            shell=True)
	subprocess.check_call(
            "xtensa-lx106-elf-objcopy --only-section .data -O binary "
            + str(source[0]) + " eagle.app.v6.data.bin",
            shell=True)
	subprocess.check_call(
            "xtensa-lx106-elf-objcopy --only-section .rodata -O binary "
            + str(source[0]) + " eagle.app.v6.rodata.bin",
            shell=True)
	subprocess.check_call(
            "xtensa-lx106-elf-objcopy --only-section .irom0.text -O binary "
            + str(source[0]) + " eagle.app.v6.irom0text.bin",
            shell=True)
	subprocess.check_call(
            env.subst('$PYTHONEXE $PLATFORMFW_DIR/3pp/ESP8266_RTOS_SDK/tools/gen_appbin.py') + " " + str(source[0]) + " 2 0 0 " + flash_size_map,
            shell=True)
        shutil.copy("eagle.app.flash.bin", str(target[0]))

    builders["ElfToBin"] = env.Builder(
        action=build_function,
        suffix=".bin")

    env.Replace(BUILDERS=builders)

    env.Replace(UPLOADCMD=' '.join([
        '"$PYTHONEXE" "$PLATFORMFW_DIR/3pp/esptool/esptool.py"',
        '--baud 230400',
        '--port $UPLOAD_PORT',
        'write_flash',
        '0x00000 $PLATFORMFW_DIR/3pp/ESP8266_RTOS_SDK/bin/boot_v1.4.bin',
        '0x01000 $BUILD_DIR/firmware.bin']))


def setup_board_arduino_due(env):
    """Setup the Arduino Due environment.

    """

    add_include_paths(env, ["src/mcus/sam"])
    setup_mcu_sam(env)


def setup_board_arduino_mega(env):
    """Setup the Arduino Mega environment.

    """

    setup_mcu_avr(env)


def setup_board_arduino_uno(env):
    """Setup the Arduino Uno environment.

    """

    setup_mcu_avr(env)


def setup_board_arduino_nano(env):
    """Setup the Arduino Nano environment.

    """

    setup_mcu_avr(env)


def setup_board_esp12e(env):
    """Setup the ESP12E environment.

    """

    setup_mcu_esp(env, "simba.flash.4m.ld", "6")


def setup_board_esp01(env):
    """Setup the ESP01 environment.

    """

    setup_mcu_esp(env, "simba.flash.1m.ld", "2")
    
    
def create_src_filter(env):
    """Create the source filter string.
    """

    src_filter_patterns = []

    # Add the board files.
    src_filter_patterns.append("-<boards>")
    src_filter_patterns.append(env.subst("+<boards/$BOARD>"))

    # Add the mcu files.
    src_filter_patterns.append("-<mcus>")
    src_filter_patterns.append(env.subst("+<mcus/$BOARD_MCU>"))

    if env.subst("$BOARD_MCU") == "sam3x8e":
        src_filter_patterns.append("+<mcus/sam>")

    # Add the drivers files.
    src_filter_patterns.append("-<drivers>")

    arch = env.subst("$ARCH")

    if arch == "arm":
        files = [
            "adc.c",
            "can.c",
            "chipid.c",
            "dac.c",
            "exti.c",
            "flash.c",
            "mcp2515.c",
            "pin.c",
            "sd.c",
            "spi.c",
            "uart.c",
            "usb.c",
            "usb_host.c",
            "usb/host/class/usb_host_class_hid.c",
            "usb/host/class/usb_host_class_mass_storage.c"
        ]

    elif arch == "avr":
        files = [
            "adc.c",
            "ds18b20.c",
            "ds3231.c",
            "exti.c",
            "mcp2515.c",
            "nrf24l01.c",
            "spi.c",
            "owi.c",
            "pin.c",
            "pwm.c",
            "sd.c",
            "uart.c",
            "uart_soft.c"
        ]

    elif arch == "esp":
        files = [
            "adc.c",
            "pin.c",
            "spi.c",
            "uart.c"
        ]

    else:
        raise ValueError("bad architecture {}".format())

    for src in files:
        src_filter_patterns.append("+<drivers/" + src + ">")

    return SRC_DEFAULT_FILTER + " " + " ".join(src_filter_patterns)


env = DefaultEnvironment()

set_default_values(env)

# Rename the name of boards that have different name in PlatformIO and
# Simba.
if env["BOARD"] in BOARD_MAP:
    env["BOARD"] = BOARD_MAP[env["BOARD"]]

board = env.subst(env["BOARD"])

add_common_include_paths(env)
add_common_defines(env)

if board == "arduino_due":
    setup_board_arduino_due(env)
elif board == "arduino_mega":
    setup_board_arduino_mega(env)
elif board == "arduino_uno":
    setup_board_arduino_uno(env)
elif board == "arduino_nano":
    setup_board_arduino_nano(env)
elif board == "esp12e":
    setup_board_esp12e(env)
elif board == "esp01":
    setup_board_esp01(env)
else:
    raise ValueError("BOARD {} is not supported by Simba.".format(board))

# variables in upper case for defines
env.Append(ARCH_UPPER=env.subst(env["ARCH"]).upper().replace("/", "_"),
           MCU_UPPER=env.subst(env["BOARD_MCU"]).upper().replace("/", "_"),
           BOARD_UPPER=env.subst(env["BOARD"]).upper().replace("/", "_"))

if "SETTINGS_INI" not in env:
    env.Append(SETTINGS_INI=[join("$BUILD_DIR", "SimbaFramework", "make", "settings.ini")])
    env.VariantDirWrap(
        join("$BUILD_DIR", "SimbaFramework", "make"),
        join("$PLATFORMFW_DIR", "make")
    )

# generated files
SETTINGS_H = "$BUILD_DIR/SimbaFramework/gen/settings.h"
SETTINGS_C = env.subst("$BUILD_DIR/SimbaFramework/gen/settings.c")
SETTINGS_BIN = env.subst("$BUILD_DIR/SimbaFramework/gen/settings.bin")
SIMBA_GEN_C = "$BUILD_DIR/SimbaFramework/gen/simba_gen.c"

# generate settings
fmt = ('"$PYTHONEXE" "$PLATFORMFW_DIR/src/kernel/tools/settings.py" --{filetype} '
       "--output-directory $BUILD_DIR/SimbaFramework/gen --setting-memory $SETTING_MEMORY "
       "--setting-offset $SETTING_OFFSET --setting-size $SETTING_SIZE "
       "$SOURCE $ENDIANESS")
env.Command(SETTINGS_H, env["SETTINGS_INI"], fmt.format(filetype="header"))
env.Command(SETTINGS_C, env["SETTINGS_INI"], fmt.format(filetype="source"))
env.Command(SETTINGS_BIN, env["SETTINGS_INI"], fmt.format(filetype="binary"))

# create a list of all sources
variant_dir = join("$BUILD_DIR", "SimbaFramework", "src")
src_dir = join("$PLATFORMFW_DIR", "src")
src_filter = create_src_filter(env)

source_files = []

for src in env.LookupSources(variant_dir, src_dir, True, src_filter):
    source_files.append(env.Object(src))

# Command to generate simba_gen.c
env.Command(SIMBA_GEN_C,
            source_files,
            ('"$PYTHONEXE" "$PLATFORMFW_DIR/src/kernel/tools/gen.py" "$NAME" "$VERSION" '
             '"$BOARD_DESC" "$MCU_DESC" "$TARGET" $SOURCES'))
source_files.append(SIMBA_GEN_C)
source_files.append(SETTINGS_C)

lib = env.Library(target=join("$BUILD_DIR", "SimbaFramework"), source=source_files)
Depends(lib, SETTINGS_BIN)

env.Append(LIBS=[lib])
