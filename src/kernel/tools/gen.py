#!/usr/bin/env python

import sys
import time
import getpass

file_fmt = """/**
 * @section License
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2014-2016, Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * This file is part of the Simba project.
 */

/**
 * This file was generated by gen.py {major}.{minor} {date}.
 */

#include "simba.h"

{sysinfo}
"""

SYSINFO_FMT = """const FAR char sysinfo[] = "app:    {name}-{version} built {date} by {user}.\\r\\n"
                           "board:  {board}\\r\\n"
                           "mcu:    {mcu}\\r\\n";
"""

MAJOR = 1
MINOR = 1


ID = 0x8000


def generate_id():
    """Generate a unique identifier. It may not contain the c-string
    termination character \x00..

    """

    global ID
    ID += 1

    if (ID & 0xff) == 0:
        ID += 1

    if ID == 0xffff:
        sys.exit(1)

    return ID


def main():
    name = sys.argv[1]
    version = sys.argv[2]
    board = sys.argv[3]
    mcu = sys.argv[4]
    outfile = sys.argv[5]
    dbfiles = sys.argv[6:]

    now = time.strftime("%Y-%m-%d %H:%M %Z")

    sysinfo = SYSINFO_FMT.format(name=name,
                                 version=version,
                                 date=now,
                                 user=getpass.getuser(),
                                 board=board,
                                 mcu=mcu)

    format_string_definitions = ''
    decoder_format_strings = ''
    command_definitions = ''
    decoder_commands = ''

    for dbfile in dbfiles:
        with open(dbfile) as fin:
            for line in fin.readlines():
                if line.startswith('__fmt_'):
                    c_variable, soam_fmtstr, decoder_fmtstr = line.strip().split(' ', 2)
                    generated_id = generate_id()
                    soam_fmtstr = '"\\x{:02x}\\x{:02x}"'.format(
                        (generated_id >> 8) & 0xff,
                        generated_id & 0xff) + soam_fmtstr
                    format_string_definitions += 'const FAR char {}[] = {};\n'.format(
                        c_variable,
                        soam_fmtstr)
                    decoder_format_strings += 'FMT: {} {}\n'.format(generated_id,
                                                                    decoder_fmtstr)
                elif line.startswith('__cmd_'):
                    c_variable, command = line.strip().split(' ', 1)
                    generated_id = generate_id()
                    soam_command = '"/\\x{:02x}\\x{:02x}\\x00"'.format(
                        (generated_id >> 8) & 0xff,
                        generated_id & 0xff)
                    command_definitions += 'const FAR char {}[] = {};\n'.format(
                        c_variable,
                        soam_command)
                    decoder_commands += 'CMD: {} {}\n'.format(generated_id, command)
                else:
                    print('Bad line:', line)
                    sys.exit(1)

    date = time.strftime("%Y-%m-%d %H:%M %Z")
                    
    with open(outfile, 'w') as fout:
        fout.write(file_fmt.format(filename=outfile,
                                   major=MAJOR,
                                   minor=MINOR,
                                   date=date,
                                   sysinfo=sysinfo))
        fout.write(format_string_definitions)
        fout.write(command_definitions)

    with open(outfile + '.db', 'wb') as fout:
        fout.write('# This file was generated by gen.py {major}.{minor} {date}.\n'.format(
            major=MAJOR,
            minor=MINOR,
            date=date))
        fout.write(decoder_format_strings)
        fout.write(decoder_commands)

        
if __name__ == '__main__':
    main()
